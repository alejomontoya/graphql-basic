"Validate the types of level"

enum Level {
  amateur
  intermediate
  advanced
}

union GlobalSearch = Course | Student | Monitor

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String @deprecated
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String

}

type Query {
   "Return all courses"
    getCourses: [Course]
    "Return one course"
    getCourse(id: ID!): Course
   "Return all students"
    getPeople: [Person]
    "Return one course"
    getPerson(id: ID!): Person
    "Execute a global search"
    searchItems(keyword: String!) : [GlobalSearch]
}

input CourseInput {
   title: String!
   teacher: String
   description: String!
   topic: String
   level: Level

}
input CourseEditInput {
   title: String
   teacher: String
   description: String
   topic: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}


type Mutation {
  "Create a course"
  createCourse(input: CourseInput!): Course
  "Edited a course"
  editCourse(_id: ID!,input: CourseEditInput): Course
  "Deleted a course"
  deleteCourse(_id: ID!): String
  "Create a person"
  createPerson(input: PersonInput!): Person
  "Edited a person"
  editPerson(_id: ID!,input: PersonEditInput): Person
  "Deleted a person"
  deletePerson(_id: ID!): String
  "Add an person to course"
  addPeople(courseID: ID!, personID: ID!): Course
}